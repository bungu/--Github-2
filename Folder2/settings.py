"""
Django settings for Folder2 project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os
import django_heroku

from socket import gethostname
hostname = gethostname()
print(hostname)

try:
    from .local_settings import *
    print("setting:local")
except ImportError:
    pass

IS_HEROKU = "DYNO" in os.environ

if not IS_HEROKU:
    from dotenv import load_dotenv
    load_dotenv()
    print("not_heroku")
else:
    print("heroku")

from dotenv import load_dotenv
# load_dotenv()
# OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ''

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# *にすることでLANのどこからでもアクセスできるようになるらしい
ALLOWED_HOSTS = ['*',"live-rank.herokuapp.com","liveinfomation.herokuapp.com"]


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 以下追加
    'django.contrib.humanize',
    'LiveRank',
    'your_tw',
    'mathfilters',
    'nplusone.ext.django',
    #'debug_toolbar',
    'whitenoise.runserver_nostatic',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # heroku導入時に追加
]

# 動画保存関連追加
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# 以下90までキャッシュ関連追加要項

# # ブラウザを閉じると消される。 sessionidにMax-Ageとexpiresが設定されなくなる。
# SESSION_EXPIRE_AT_BROWSER_CLOSE = True 

#  # セッションデータが永続化されない。キャッシュが溢れたり、キャッシュサーバーが再起動するとクリアされる可能性も
#  # 今回はせいぜい1分保存されれば破棄されるのでこれで十分。
#  # 他に、file,db,ユーザー端末上のcookieがある。
# SESSION_ENGINE = "django.contrib.sessions.backends.cache"

ROOT_URLCONF = 'Folder2.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Folder2.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# ここがtrueだとmacで作ったサーバーでも本番と同じURLで動く
remote_postgre = True

if "tsudaharujinoMacBook-Pro-2" in hostname:
    if remote_postgre == False:
        print("ホストネームがPCかつ選択されているのでデバック環境")
        # デバッグ環境
        DEBUG = True
        DATABASES = {
            'default': {
                # SQLiteの場合
                # 'ENGINE': 'django.db.backends.sqlite3',
                # 'NAME': BASE_DIR / 'db.sqlite3',
                # postgreの場合
                'ENGINE': 'django.db.backends.postgresql_psycopg2',
                'NAME': 'liverank_psql',
                'USER': os.environ.get('DB_USER'),
                'PASSWORD': os.environ.get('DB_PASSWORD'),
                'HOST': '',
                'PORT': '',
            }
        }
        check = False
    elif remote_postgre == True:
        import dj_database_url
        DEBUG = True
        db_from_env = dj_database_url.config()
        # データベースURL
        DATABASE_URL = ""
        DATABASES = {
            'default': dj_database_url.config(default=DATABASE_URL)
        }
        
else:
    # 本番環境
    # DEBUG = True
    DEBUG = False
    import dj_database_url
    db_from_env = dj_database_url.config()
    DATABASES = {
        'default': dj_database_url.config()
    }

# if not DEBUG:
#     SECRET_KEY = os.environ['SECRET_KEY']
#     django_heroku.settings(locals()) #追加


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

# Localizationのオンオフ
USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/LiveRank/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'LiveRank/static')

# STATICFILES_DIRS = (
#     os.path.join(BASE_DIR, 'LiveRank/static'),
# )

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
